-- Plugin-specific highlights for Cursor Dark Theme
local colors = require("user.themes.cursor-dark").colors

local M = {}

-- Helper function to create highlight groups
local function hl(group, opts)
  if opts.link then
    vim.api.nvim_set_hl(0, group, { link = opts.link })
  else
    vim.api.nvim_set_hl(0, group, opts)
  end
end

function M.setup()
  -- Telescope
  hl("TelescopeNormal", { fg = colors.fg, bg = colors.bg_popup })
  hl("TelescopeBorder", { fg = colors.border, bg = colors.bg_popup })
  hl("TelescopePromptNormal", { fg = colors.fg, bg = colors.bg_popup })
  hl("TelescopePromptBorder", { fg = colors.border, bg = colors.bg_popup })
  hl("TelescopePromptTitle", { fg = colors.bg, bg = colors.blue, bold = true })
  hl("TelescopePreviewTitle", { fg = colors.bg, bg = colors.green, bold = true })
  hl("TelescopeResultsTitle", { fg = colors.bg, bg = colors.purple, bold = true })
  hl("TelescopeSelection", { fg = colors.fg_light, bg = colors.selection })
  hl("TelescopeSelectionCaret", { fg = colors.blue })
  hl("TelescopeMultiSelection", { fg = colors.purple })
  hl("TelescopeMatching", { fg = colors.yellow, bold = true })
  hl("TelescopePromptPrefix", { fg = colors.blue })
  
  -- FZF-Lua
  hl("FzfLuaNormal", { fg = colors.fg, bg = colors.bg_popup })
  hl("FzfLuaBorder", { fg = colors.border, bg = colors.bg_popup })
  hl("FzfLuaTitle", { fg = colors.bg, bg = colors.blue, bold = true })
  hl("FzfLuaPreviewTitle", { fg = colors.bg, bg = colors.green, bold = true })
  hl("FzfLuaCursor", { fg = colors.bg, bg = colors.fg })
  hl("FzfLuaCursorLine", { bg = colors.selection })
  hl("FzfLuaCursorLineNr", { fg = colors.line_number_current, bold = true })
  hl("FzfLuaSearch", { fg = colors.yellow, bold = true })
  hl("FzfLuaScrollBorderEmpty", { fg = colors.border })
  hl("FzfLuaScrollBorderFull", { fg = colors.blue })
  hl("FzfLuaScrollFloatEmpty", { fg = colors.border })
  hl("FzfLuaScrollFloatFull", { fg = colors.blue })
  hl("FzfLuaHelpNormal", { fg = colors.fg, bg = colors.bg_popup })
  hl("FzfLuaHelpBorder", { fg = colors.border, bg = colors.bg_popup })
  
  -- NvimTree
  hl("NvimTreeNormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("NvimTreeNormalNC", { fg = colors.fg, bg = colors.bg_alt })
  hl("NvimTreeWinSeparator", { fg = colors.border, bg = colors.bg_alt })
  hl("NvimTreeEndOfBuffer", { fg = colors.bg_alt, bg = colors.bg_alt })
  hl("NvimTreeRootFolder", { fg = colors.blue, bold = true })
  hl("NvimTreeFolderName", { fg = colors.blue })
  hl("NvimTreeFolderIcon", { fg = colors.blue })
  hl("NvimTreeEmptyFolderName", { fg = colors.fg_dark })
  hl("NvimTreeOpenedFolderName", { fg = colors.cyan })
  hl("NvimTreeExecFile", { fg = colors.green })
  hl("NvimTreeOpenedFile", { fg = colors.fg_light })
  hl("NvimTreeSpecialFile", { fg = colors.yellow })
  hl("NvimTreeImageFile", { fg = colors.purple })
  hl("NvimTreeMarkdownFile", { fg = colors.blue })
  hl("NvimTreeIndentMarker", { fg = colors.fg_dark })
  hl("NvimTreeLspDiagnosticsError", { fg = colors.error })
  hl("NvimTreeLspDiagnosticsWarning", { fg = colors.warning })
  hl("NvimTreeLspDiagnosticsInformation", { fg = colors.info })
  hl("NvimTreeLspDiagnosticsHint", { fg = colors.hint })
  hl("NvimTreeGitDirty", { fg = colors.git_change })
  hl("NvimTreeGitStaged", { fg = colors.git_add })
  hl("NvimTreeGitMerge", { fg = colors.purple })
  hl("NvimTreeGitRenamed", { fg = colors.yellow })
  hl("NvimTreeGitNew", { fg = colors.git_add })
  hl("NvimTreeGitDeleted", { fg = colors.git_delete })
  hl("NvimTreeGitIgnored", { fg = colors.fg_dark })
  hl("NvimTreeCursorLine", { bg = colors.cursor_line })
  hl("NvimTreeCursorColumn", { bg = colors.cursor_line })
  
  -- Lualine
  hl("lualine_a_normal", { fg = colors.bg, bg = colors.blue, bold = true })
  hl("lualine_a_insert", { fg = colors.bg, bg = colors.green, bold = true })
  hl("lualine_a_visual", { fg = colors.bg, bg = colors.purple, bold = true })
  hl("lualine_a_replace", { fg = colors.bg, bg = colors.red, bold = true })
  hl("lualine_a_command", { fg = colors.bg, bg = colors.yellow, bold = true })
  hl("lualine_a_terminal", { fg = colors.bg, bg = colors.cyan, bold = true })
  hl("lualine_a_inactive", { fg = colors.fg_dark, bg = colors.bg_alt })
  
  hl("lualine_b_normal", { fg = colors.fg_light, bg = colors.bg_light })
  hl("lualine_b_insert", { fg = colors.fg_light, bg = colors.bg_light })
  hl("lualine_b_visual", { fg = colors.fg_light, bg = colors.bg_light })
  hl("lualine_b_replace", { fg = colors.fg_light, bg = colors.bg_light })
  hl("lualine_b_command", { fg = colors.fg_light, bg = colors.bg_light })
  hl("lualine_b_terminal", { fg = colors.fg_light, bg = colors.bg_light })
  hl("lualine_b_inactive", { fg = colors.fg_dark, bg = colors.bg_alt })
  
  hl("lualine_c_normal", { fg = colors.fg, bg = colors.bg })
  hl("lualine_c_insert", { fg = colors.fg, bg = colors.bg })
  hl("lualine_c_visual", { fg = colors.fg, bg = colors.bg })
  hl("lualine_c_replace", { fg = colors.fg, bg = colors.bg })
  hl("lualine_c_command", { fg = colors.fg, bg = colors.bg })
  hl("lualine_c_terminal", { fg = colors.fg, bg = colors.bg })
  hl("lualine_c_inactive", { fg = colors.fg_dark, bg = colors.bg_alt })
  
  -- Bufferline
  hl("BufferLineBackground", { fg = colors.fg_dark, bg = colors.bg_alt })
  hl("BufferLineBuffer", { fg = colors.fg_dark, bg = colors.bg_alt })
  hl("BufferLineBufferSelected", { fg = colors.fg_light, bg = colors.bg, bold = true })
  hl("BufferLineBufferVisible", { fg = colors.fg, bg = colors.bg_light })
  hl("BufferLineCloseButton", { fg = colors.fg_dark, bg = colors.bg_alt })
  hl("BufferLineCloseButtonSelected", { fg = colors.red, bg = colors.bg })
  hl("BufferLineCloseButtonVisible", { fg = colors.fg_dark, bg = colors.bg_light })
  hl("BufferLineFill", { fg = colors.fg_dark, bg = colors.bg_dark })
  hl("BufferLineIndicatorSelected", { fg = colors.blue, bg = colors.bg })
  hl("BufferLineIndicatorVisible", { fg = colors.bg_light, bg = colors.bg_light })
  hl("BufferLineModified", { fg = colors.yellow, bg = colors.bg_alt })
  hl("BufferLineModifiedSelected", { fg = colors.yellow, bg = colors.bg })
  hl("BufferLineModifiedVisible", { fg = colors.yellow, bg = colors.bg_light })
  hl("BufferLineSeparator", { fg = colors.bg_dark, bg = colors.bg_alt })
  hl("BufferLineSeparatorSelected", { fg = colors.bg_dark, bg = colors.bg })
  hl("BufferLineSeparatorVisible", { fg = colors.bg_dark, bg = colors.bg_light })
  hl("BufferLineTab", { fg = colors.fg_dark, bg = colors.bg_alt })
  hl("BufferLineTabSelected", { fg = colors.fg_light, bg = colors.bg })
  hl("BufferLineTabClose", { fg = colors.red, bg = colors.bg_alt })
  
  -- GitSigns
  hl("GitSignsAdd", { fg = colors.git_add })
  hl("GitSignsChange", { fg = colors.git_change })
  hl("GitSignsDelete", { fg = colors.git_delete })
  hl("GitSignsAddNr", { fg = colors.git_add })
  hl("GitSignsChangeNr", { fg = colors.git_change })
  hl("GitSignsDeleteNr", { fg = colors.git_delete })
  hl("GitSignsAddLn", { bg = colors.git_add, fg = colors.bg })
  hl("GitSignsChangeLn", { bg = colors.git_change, fg = colors.bg })
  hl("GitSignsDeleteLn", { bg = colors.git_delete, fg = colors.bg })
  hl("GitSignsCurrentLineBlame", { fg = colors.fg_dark, italic = true })
  
  -- Neogit
  hl("NeogitBranch", { fg = colors.purple })
  hl("NeogitRemote", { fg = colors.orange })
  hl("NeogitHunkHeader", { fg = colors.fg_light, bg = colors.bg_light })
  hl("NeogitHunkHeaderHighlight", { fg = colors.fg_light, bg = colors.selection })
  hl("NeogitDiffContextHighlight", { bg = colors.bg_light })
  hl("NeogitDiffDeleteHighlight", { fg = colors.git_delete, bg = colors.bg_light })
  hl("NeogitDiffAddHighlight", { fg = colors.git_add, bg = colors.bg_light })
  hl("NeogitCommitViewHeader", { fg = colors.blue, bold = true })
  hl("NeogitFilePath", { fg = colors.cyan })
  hl("NeogitObjectId", { fg = colors.yellow })
  hl("NeogitStash", { fg = colors.purple })
  hl("NeogitRebaseDone", { fg = colors.green })
  hl("NeogitTagName", { fg = colors.yellow })
  hl("NeogitTagDistance", { fg = colors.cyan })
  
  -- Diffview
  hl("DiffviewPrimary", { fg = colors.blue })
  hl("DiffviewSecondary", { fg = colors.purple })
  hl("DiffviewNormal", { fg = colors.fg, bg = colors.bg })
  hl("DiffviewCursorLine", { bg = colors.cursor_line })
  hl("DiffviewVertSplit", { fg = colors.border })
  hl("DiffviewSignColumn", { fg = colors.line_number, bg = colors.bg })
  hl("DiffviewStatusLine", { fg = colors.fg_light, bg = colors.bg_statusline })
  hl("DiffviewStatusLineNC", { fg = colors.fg_dark, bg = colors.bg_alt })
  hl("DiffviewFilePanelTitle", { fg = colors.blue, bold = true })
  hl("DiffviewFilePanelCounter", { fg = colors.purple })
  hl("DiffviewFilePanelFileName", { fg = colors.fg })
  hl("DiffviewFolderName", { fg = colors.blue })
  hl("DiffviewFolderSign", { fg = colors.blue })
  hl("DiffviewReference", { fg = colors.purple })
  hl("DiffviewHash", { fg = colors.yellow })
  hl("DiffviewTimeAgo", { fg = colors.cyan })
  hl("DiffviewCommitAuthor", { fg = colors.orange })
  
  -- Which-key
  hl("WhichKey", { fg = colors.blue })
  hl("WhichKeyGroup", { fg = colors.purple })
  hl("WhichKeyDesc", { fg = colors.fg })
  hl("WhichKeySeperator", { fg = colors.green })
  hl("WhichKeySeparator", { fg = colors.green })
  hl("WhichKeyFloat", { bg = colors.bg_popup })
  hl("WhichKeyBorder", { fg = colors.border, bg = colors.bg_popup })
  hl("WhichKeyValue", { fg = colors.cyan })
  
  -- Notify
  hl("NotifyERRORBorder", { fg = colors.error })
  hl("NotifyWARNBorder", { fg = colors.warning })
  hl("NotifyINFOBorder", { fg = colors.info })
  hl("NotifyDEBUGBorder", { fg = colors.hint })
  hl("NotifyTRACEBorder", { fg = colors.purple })
  hl("NotifyERRORIcon", { fg = colors.error })
  hl("NotifyWARNIcon", { fg = colors.warning })
  hl("NotifyINFOIcon", { fg = colors.info })
  hl("NotifyDEBUGIcon", { fg = colors.hint })
  hl("NotifyTRACEIcon", { fg = colors.purple })
  hl("NotifyERRORTitle", { fg = colors.error })
  hl("NotifyWARNTitle", { fg = colors.warning })
  hl("NotifyINFOTitle", { fg = colors.info })
  hl("NotifyDEBUGTitle", { fg = colors.hint })
  hl("NotifyTRACETitle", { fg = colors.purple })
  hl("NotifyERRORBody", { fg = colors.fg, bg = colors.bg_popup })
  hl("NotifyWARNBody", { fg = colors.fg, bg = colors.bg_popup })
  hl("NotifyINFOBody", { fg = colors.fg, bg = colors.bg_popup })
  hl("NotifyDEBUGBody", { fg = colors.fg, bg = colors.bg_popup })
  hl("NotifyTRACEBody", { fg = colors.fg, bg = colors.bg_popup })
  
  -- Trouble
  hl("TroubleText", { fg = colors.fg })
  hl("TroubleCount", { fg = colors.purple, bg = colors.bg_light })
  hl("TroubleNormal", { fg = colors.fg, bg = colors.bg })
  hl("TroubleTextInformation", { fg = colors.info })
  hl("TroubleSignError", { fg = colors.error })
  hl("TroubleSignWarning", { fg = colors.warning })
  hl("TroubleSignInformation", { fg = colors.info })
  hl("TroubleSignHint", { fg = colors.hint })
  hl("TroubleError", { fg = colors.error })
  hl("TroubleWarning", { fg = colors.warning })
  hl("TroubleInformation", { fg = colors.info })
  hl("TroubleHint", { fg = colors.hint })
  hl("TroubleLocation", { fg = colors.fg_dark })
  hl("TroubleFile", { fg = colors.blue })
  hl("TroubleSource", { fg = colors.fg_dark })
  hl("TroubleCode", { fg = colors.fg_dark })
  
  -- LSP Saga
  hl("LspSagaBorderTitle", { fg = colors.cyan })
  hl("LspSagaHoverBorder", { fg = colors.blue })
  hl("LspSagaRenameBorder", { fg = colors.green })
  hl("LspSagaDefPreviewBorder", { fg = colors.green })
  hl("LspSagaCodeActionBorder", { fg = colors.blue })
  hl("LspSagaFinderSelection", { fg = colors.bg_statusline })
  hl("LspSagaCodeActionTitle", { fg = colors.blue })
  hl("LspSagaCodeActionContent", { fg = colors.purple })
  hl("LspSagaSignatureHelpBorder", { fg = colors.red })
  hl("ReferencesCount", { fg = colors.purple })
  hl("DefinitionCount", { fg = colors.purple })
  hl("DefinitionIcon", { fg = colors.blue })
  hl("ReferencesIcon", { fg = colors.blue })
  hl("TargetWord", { fg = colors.cyan })
  
  -- Outline
  hl("OutlineGuides", { fg = colors.fg_dark })
  hl("OutlineFoldMarker", { fg = colors.blue })
  hl("OutlineDetails", { fg = colors.fg_dark })
  
  -- Comment.nvim (todo-comments)
  hl("TodoBgFIX", { fg = colors.bg, bg = colors.error, bold = true })
  hl("TodoBgHACK", { fg = colors.bg, bg = colors.warning, bold = true })
  hl("TodoBgNOTE", { fg = colors.bg, bg = colors.info, bold = true })
  hl("TodoBgPERF", { fg = colors.bg, bg = colors.purple, bold = true })
  hl("TodoBgTEST", { fg = colors.bg, bg = colors.cyan, bold = true })
  hl("TodoBgTODO", { fg = colors.bg, bg = colors.yellow, bold = true })
  hl("TodoBgWARN", { fg = colors.bg, bg = colors.warning, bold = true })
  hl("TodoFgFIX", { fg = colors.error })
  hl("TodoFgHACK", { fg = colors.warning })
  hl("TodoFgNOTE", { fg = colors.info })
  hl("TodoFgPERF", { fg = colors.purple })
  hl("TodoFgTEST", { fg = colors.cyan })
  hl("TodoFgTODO", { fg = colors.yellow })
  hl("TodoFgWARN", { fg = colors.warning })
  hl("TodoSignFIX", { fg = colors.error })
  hl("TodoSignHACK", { fg = colors.warning })
  hl("TodoSignNOTE", { fg = colors.info })
  hl("TodoSignPERF", { fg = colors.purple })
  hl("TodoSignTEST", { fg = colors.cyan })
  hl("TodoSignTODO", { fg = colors.yellow })
  hl("TodoSignWARN", { fg = colors.warning })
  
  -- Illuminate
  hl("IlluminatedWordText", { bg = colors.cursor_line })
  hl("IlluminatedWordRead", { bg = colors.cursor_line })
  hl("IlluminatedWordWrite", { bg = colors.cursor_line })
  
  -- Indent Blankline
  hl("IndentBlanklineChar", { fg = colors.fg_dark })
  hl("IndentBlanklineContextChar", { fg = colors.purple })
  hl("IndentBlanklineContextStart", { underline = true })
  hl("IndentBlanklineSpaceChar", { fg = colors.fg_dark })
  hl("IndentBlanklineSpaceCharBlankline", { fg = colors.fg_dark })
  
  -- Spectre
  hl("SpectreSearch", { fg = colors.yellow, bg = colors.search })
  hl("SpectreReplace", { fg = colors.green, bg = colors.search })
  hl("SpectreFile", { fg = colors.blue })
  hl("SpectreBorder", { fg = colors.border })
  hl("SpectreDir", { fg = colors.purple })
  hl("SpectreHeader", { fg = colors.blue, bold = true })
  
  -- Cybu (buffer switcher)
  hl("CybuFocus", { fg = colors.yellow })
  hl("CybuAdjacent", { fg = colors.fg_dark })
  hl("CybuBackground", { fg = colors.fg_dark })
  hl("CybuBorder", { fg = colors.border })
  
  -- Registers
  hl("RegistersNormal", { fg = colors.fg, bg = colors.bg_popup })
  hl("RegistersBorder", { fg = colors.border, bg = colors.bg_popup })
  hl("RegistersPreview", { fg = colors.fg_dark })
  
  -- Goto Preview
  hl("GotoPreviewBorder", { fg = colors.border, bg = colors.bg_popup })
  
  -- Git Blame
  hl("GitBlameVirtualText", { fg = colors.fg_dark, italic = true })
  
  -- Toggleterm
  hl("ToggleTerm1Normal", { bg = colors.bg })
  hl("ToggleTerm1NormalFloat", { bg = colors.bg_popup })
  hl("ToggleTerm1FloatBorder", { fg = colors.border, bg = colors.bg_popup })
  
  -- Winbar
  hl("WinBar", { fg = colors.fg, bg = colors.bg })
  hl("WinBarNC", { fg = colors.fg_dark, bg = colors.bg })
  
  -- Render Markdown
  hl("RenderMarkdownH1", { fg = colors.blue, bold = true })
  hl("RenderMarkdownH2", { fg = colors.cyan, bold = true })
  hl("RenderMarkdownH3", { fg = colors.yellow, bold = true })
  hl("RenderMarkdownH4", { fg = colors.orange, bold = true })
  hl("RenderMarkdownH5", { fg = colors.purple, bold = true })
  hl("RenderMarkdownH6", { fg = colors.pink, bold = true })
  hl("RenderMarkdownCode", { fg = colors.orange, bg = colors.bg_light })
  hl("RenderMarkdownCodeInline", { fg = colors.orange, bg = colors.bg_light })
  hl("RenderMarkdownBullet", { fg = colors.purple })
  hl("RenderMarkdownTableHead", { fg = colors.blue, bold = true })
  hl("RenderMarkdownTableRow", { fg = colors.fg })
  hl("RenderMarkdownSuccess", { fg = colors.green })
  hl("RenderMarkdownInfo", { fg = colors.info })
  hl("RenderMarkdownHint", { fg = colors.hint })
  hl("RenderMarkdownWarn", { fg = colors.warning })
  hl("RenderMarkdownError", { fg = colors.error })
  hl("RenderMarkdownQuote", { fg = colors.green, italic = true })
  
  -- Snacks.nvim
  hl("SnacksNotifierInfo", { fg = colors.info })
  hl("SnacksNotifierWarn", { fg = colors.warning })
  hl("SnacksNotifierError", { fg = colors.error })
  hl("SnacksNotifierDebug", { fg = colors.hint })
  hl("SnacksNotifierTrace", { fg = colors.purple })
  hl("SnacksNotifierTitle", { fg = colors.fg_light, bold = true })
  hl("SnacksNotifierBorder", { fg = colors.border })
  hl("SnacksNotifierFooter", { fg = colors.fg_dark })
  hl("SnacksNotifierIcon", { fg = colors.blue })
  
  -- Avante.nvim
  hl("AvanteTitle", { fg = colors.blue, bold = true })
  hl("AvanteReversedTitle", { fg = colors.bg, bg = colors.blue, bold = true })
  hl("AvanteSubtitle", { fg = colors.cyan })
  hl("AvanteReversedSubtitle", { fg = colors.bg, bg = colors.cyan })
  hl("AvanteThirdTitle", { fg = colors.yellow })
  hl("AvanteReversedThirdTitle", { fg = colors.bg, bg = colors.yellow })
  hl("AvanteConflictCurrent", { fg = colors.git_add })
  hl("AvanteConflictIncoming", { fg = colors.git_change })
  hl("AvanteConflictAncestor", { fg = colors.purple })
  
  -- Context Pilot
  hl("ContextPilotNormal", { fg = colors.fg, bg = colors.bg_popup })
  hl("ContextPilotBorder", { fg = colors.border, bg = colors.bg_popup })
  hl("ContextPilotTitle", { fg = colors.blue, bold = true })
  
  -- BQF (Better Quickfix)
  hl("BqfPreviewBorder", { fg = colors.border })
  hl("BqfPreviewTitle", { fg = colors.blue, bold = true })
  hl("BqfPreviewThumb", { bg = colors.selection })
  hl("BqfPreviewSbar", { bg = colors.bg_light })
  hl("BqfPreviewCursor", { fg = colors.bg, bg = colors.fg })
  hl("BqfPreviewCursorLine", { bg = colors.cursor_line })
  hl("BqfPreviewRange", { bg = colors.selection })
  hl("BqfSign", { fg = colors.blue })
  
  -- Numb (peek lines)
  hl("NumbToggle", { fg = colors.purple, bold = true })
  
  -- Spider (word motion)
  -- No specific highlights needed, uses default cursor
  
  -- Project.nvim
  -- Uses telescope highlights
  
  -- Mini.pick
  hl("MiniPickBorder", { fg = colors.border, bg = colors.bg_popup })
  hl("MiniPickBorderBusy", { fg = colors.yellow, bg = colors.bg_popup })
  hl("MiniPickBorderText", { fg = colors.cyan, bg = colors.bg_popup })
  hl("MiniPickIconDirectory", { fg = colors.blue })
  hl("MiniPickIconFile", { fg = colors.fg })
  hl("MiniPickHeader", { fg = colors.blue, bold = true })
  hl("MiniPickMatchCurrent", { bg = colors.selection })
  hl("MiniPickMatchMarked", { fg = colors.yellow })
  hl("MiniPickMatchRanges", { fg = colors.purple })
  hl("MiniPickNormal", { fg = colors.fg, bg = colors.bg_popup })
  hl("MiniPickPreviewLine", { bg = colors.cursor_line })
  hl("MiniPickPreviewRegion", { bg = colors.selection })
  hl("MiniPickPrompt", { fg = colors.blue, bg = colors.bg_popup })
end

return M