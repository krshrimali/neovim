local status_ok, which_key = pcall(require, "which-key")
if not status_ok then
  return
end

which_key.add({
  { "<leader>b", "<cmd>Telescope buffers<cr>", desc = "Telescope buffers" },
  { "<leader>e", "<cmd>NvimTreeToggle<cr>", desc = "Explorer" },
  { "<leader>w", "<cmd>w<CR>", desc = "Write" },
  { "<leader>h", "<cmd>nohlsearch<CR>", desc = "No HL" },
  { "<leader>q", "<cmd>lua require('user.functions').smart_quit()<CR>", desc = "Quit" },

  -- Options
  { "<leader>oc", "<cmd>lua vim.g.cmp_active=false<cr>", desc = "Completion off" },
  { "<leader>oC", "<cmd>lua vim.g.cmp_active=true<cr>", desc = "Completion on" },
  { "<leader>ow", '<cmd>lua require("user.functions").toggle_option("wrap")<cr>', desc = "Wrap" },
  { "<leader>or", '<cmd>lua require("user.functions").toggle_option("relativenumber")<cr>', desc = "Relative" },
  { "<leader>ol", '<cmd>lua require("user.functions").toggle_option("cursorline")<cr>', desc = "Cursorline" },
  { "<leader>os", '<cmd>lua require("user.functions").toggle_option("spell")<cr>', desc = "Spell" },
  { "<leader>ot", '<cmd>lua require("user.functions").toggle_tabline()<cr>', desc = "Tabline" },

  -- Split
  { "<leader>ks", "<cmd>split<cr>", desc = "HSplit" },
  { "<leader>kv", "<cmd>vsplit<cr>", desc = "VSplit" },

  -- Session
  { "<leader>Ss", "<cmd>SessionSave<cr>", desc = "Save" },
  { "<leader>Sr", "<cmd>SessionRestore<cr>", desc = "Restore" },
  { "<leader>Sx", "<cmd>SessionDelete<cr>", desc = "Delete" },
  { "<leader>Sf", "<cmd>Autosession search<cr>", desc = "Find" },
  { "<leader>Sd", "<cmd>Autosession delete<cr>", desc = "Find Delete" },

  -- Replace
  { "<leader>rr", "<cmd>lua require('spectre').open()<cr>", desc = "Replace" },
  { "<leader>rw", "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", desc = "Replace Word (Workspace)" },
  { "<leader>rf", "<cmd>lua require('spectre').open_file_search({select_word=true})<cr>", desc = "Replace Word (Buffer)" },
  { "<leader>rb", "<cmd>lua require('spectre').open_file_search()<cr>", desc = "Replace Buffer" },

  -- Code Runner
  { "<leader>Rb", ":TermExec cmd=./.buildme.sh<CR>", desc = "Build the project" },
  { "<leader>Rp", ':TermExec cmd="python %<CR>"', desc = "Run python file" },

  -- Debug
  { "<leader>Db", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", desc = "Breakpoint" },
  { "<leader>Dc", "<cmd>lua require'dap'.continue()<cr>", desc = "Continue" },
  { "<leader>Di", "<cmd>lua require'dap'.step_into()<cr>", desc = "Into" },
  { "<leader>Do", "<cmd>lua require'dap'.step_over()<cr>", desc = "Over" },
  { "<leader>DO", "<cmd>lua require'dap'.step_out()<cr>", desc = "Out" },
  { "<leader>Dr", "<cmd>lua require'dap'.repl.toggle()<cr>", desc = "Repl" },
  { "<leader>Dl", "<cmd>lua require'dap'.run_last()<cr>", desc = "Last" },
  { "<leader>Du", "<cmd>lua require'dapui'.toggle()<cr>", desc = "UI" },
  { "<leader>Dx", "<cmd>lua require'dap'.terminate()<cr>", desc = "Exit" },

  -- Diagnostics
  { "<leader>ldc", "<cmd>lua require('telescope.builtin').diagnostics({ bufnr = 0 })<cr>", desc = "Diagnostics of current buffer" },
  { "<leader>ldw", "<cmd>lua require('telescope.builtin').diagnostics()<cr>", desc = "Workspace Diagnostics" },
  { "<leader>ldu", "<cmd>lua require('telescope.builtin').diagnostics({ no_unlisted = true })<cr>", desc = "Diagnostics from listed buffers" },

  -- Find using Telescope
  { "<leader>fB", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
  { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Buffers" },
  { "<leader>fc", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme" },
  { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find files" },
  { "<leader>fg", "<cmd>Telescope git_files<cr>", desc = "Git Files" },
  { "<leader>ftt", "<cmd>Telescope live_grep<cr>", desc = "Find Text" },
  { "<leader>fta", "<cmd>Telescope live_grep_args<cr>", desc = "Find text (live grep args)" },
  { "<leader>fts", "<cmd>lua require('telescope').extensions.live_grep_args.live_grep_args(default_text=vim.fn.expand('<cword>'))", desc = "Live Grep Args with the word under cursor" },
  { "<leader>fss", "<cmd>lua require('telescope.builtin').live_grep({default_text=vim.fn.expand('<cword>')})<cr>", desc = "Find string in the workspace" },
  { "<leader>fsb", "<cmd>lua require('telescope.builtin').live_grep({default_text=vim.fn.expand('<cword>'), grep_open_files=true})<cr>", desc = "Grep only open files" },
  { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help" },
  { "<leader>fH", "<cmd>Telescope highlights<cr>", desc = "Highlights" },
  { "<leader>fi", "<cmd>Telescope lsp_incoming_calls<cr>", desc = "Incoming calls" },
  { "<leader>fo", "<cmd>Telescope lsp_outgoing_calls<cr>", desc = "Outgoing calls" },
  { "<leader>fI", "<cmd>Telescope lsp_implementations<cr>", desc = "Implementations" },
  { "<leader>fl", "<cmd>Telescope resume<cr>", desc = "Last Search" },
  { "<leader>fM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
  { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent File" },
  { "<leader>fR", "<cmd>Telescope registers<cr>", desc = "Registers" },
  { "<leader>fk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
  { "<leader>fC", "<cmd>Telescope commands<cr>", desc = "Commands" },

  -- Git
  { "<leader>gg", "<cmd>lua require ('user.terminal').lazygit_toggle()<cr>", desc = "Lazygit" },
  { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>", desc = "Next Hunk" },
  { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>", desc = "Prev Hunk" },
  { "<leader>gll", "<cmd>GitBlameToggle<cr>", desc = "Blame Virtual Text" },
  { "<leader>glf", "<cmd>Git blame<cr>", desc = "Blame column" },
  { "<leader>glg", "<cmd>Gitsigns blame_line<cr>", desc = "Blame line preview" },
  { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", desc = "Preview Hunk" },
  { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk" },
  { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer" },
  { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk" },
  { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk" },
  { "<leader>go", "<cmd>Telescope git_status<cr>", desc = "Open changed file" },
  -- { "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
  -- { "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit" },
  { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Diff" },

  -- GitBlame
  { "<leader>Gl", "<cmd>GitBlameToggle<cr>", desc = "Blame Toggle" },
  { "<leader>Gc", "<cmd>GitBlameCopySHA<cr>", desc = "Copy SHA URL of the commit" },
  { "<leader>Go", "<cmd>GitBlameOpenCommitURL<cr>", desc = "Open commit URL" },

  -- LSP
  { "<leader>lA", "<cmd>lua vim.lsp.codelens.run()<cr>", desc = "CodeLens Action" },
  { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action" },
  { "<leader>lc", "<cmd>lua require('user.lsp').server_capabilities()<cr>", desc = "Get Capabilities" },
  { "<leader>ld", "<cmd>lua require('telescope.builtin').diagnostics({ bufnr = 0 })<cr>", desc = "Document diagnostics" },
  { "<leader>lw", "<cmd>lua require('telescope.builtin').diagnostics()<cr>", desc = "Workspace Diagnostics" },
  { "<leader>lf", "<cmd>lua vim.lsp.buf.format({ async = true })<cr>", desc = "Format" },
  { "<leader>lF", "<cmd>LspToggleAutoFormat<cr>", desc = "Toggle Autoformat" },
  { "<leader>li", "<cmd>MasonLog<cr>", desc = "Info" },
  { "<leader>lh", "<cmd>lua require('lsp-inlayhints').toggle()<cr>", desc = "Toggle Hints" },
  { "<leader>lH", "<cmd>IlluminateToggle<cr>", desc = "Toggle Doc HL" },
  { "<leader>lI", "<cmd>Mason<cr>", desc = "Installer Info" },
  { "<leader>lj", "<cmd>lua vim.diagnostic.goto_next({buffer=0})<CR>", desc = "Next Diagnostic" },
  { "<leader>lk", "<cmd>lua vim.diagnostic.goto_prev({buffer=0})<cr>", desc = "Prev Diagnostic" },
  { "<leader>lev", "<cmd>lua require('lsp_lines').toggle()<cr>", desc = "Virtual Lines" },
  { "<leader>leV", function() vim.diagnostic.config { virtual_text = not vim.diagnostic.config().virtual_text } end, desc = "Virtual Text" },
  { "<leader>lo", "<cmd>Outline<cr>", desc = "Outline (toggles)" },
  { "<leader>lq", "<cmd>lua vim.diagnostic.setloclist()<cr>", desc = "Quickfix (Diagnostics)" },
  { "<leader>lQ", "<cmd>lua require('telescope.builtin').quickfix()<cr>", desc = "Quickfix (Telescope)" },
  { "<leader>lR", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
  { "<leader>lr", "<cmd>Trouble lsp_references<cr>", desc = "References" },
  { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols" },
  { "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols" },
  { "<leader>lgg", "<cmd>lua require('goto-preview').goto_preview_definition()<cr>", desc = "Goto Preview Definition" },
  { "<leader>lgt", "<cmd>lua require('goto-preview').goto_preview_type_definition()<cr>", desc = "Goto Preview Type Definition" },
  { "<leader>lgi", "<cmd>lua require('goto-preview').goto_preview_implementation()<cr>", desc = "Goto Preview Implementation" },
  { "<leader>lgr", "<cmd>lua require('goto-preview').goto_preview_references()<cr>", desc = "Goto Preview References" },
  { "<leader>lgc", "<cmd>lua require('goto-preview').close_all_win()<cr>", desc = "Close all windows" },
  { "<leader>lt", '<cmd>lua require("user.functions").toggle_diagnostics()<cr>', desc = "Toggle Diagnostics" },
  { "<leader>lu", "<cmd>LuaSnipUnlinkCurrent<cr>", desc = "Unlink Snippet" },

  -- Terminal
  { "<leader>T1", ":1ToggleTerm<cr>", desc = "Terminal 1" },
  { "<leader>T2", ":2ToggleTerm<cr>", desc = "Terminal 2" },
  { "<leader>T3", ":3ToggleTerm<cr>", desc = "Terminal 3" },
  { "<leader>T4", ":4ToggleTerm<cr>", desc = "Terminal 4" },
  { "<leader>Tn", "<cmd>lua _NODE_TOGGLE()<cr>", desc = "Node" },
  { "<leader>Tu", "<cmd>lua _NCDU_TOGGLE()<cr>", desc = "NCDU" },
  { "<leader>Tt", "<cmd>lua _HTOP_TOGGLE()<cr>", desc = "Htop" },
  { "<leader>Tm", "<cmd>lua _MAKE_TOGGLE()<cr>", desc = "Make" },
  { "<leader>Tf", "<cmd>ToggleTerm direction=float<cr>", desc = "Float" },
  { "<leader>Th", "<cmd>ToggleTerm size=10 direction=horizontal<cr>", desc = "Horizontal" },
  { "<leader>Tv", "<cmd>ToggleTerm size=80 direction=vertical<cr>", desc = "Vertical" },

  -- Telescope
  { "<leader>tc", "<cmd>Telescope commands<cr>", desc = "Commands" },
  { "<leader>td", "<cmd>Telescope diagnostics<cr>", desc = "Diagnostics" },
  { "<leader>tm", "<cmd>Telescope media_files<cr>", desc = "Media Files" },
  { "<leader>tgc", "<cmd>Telescope git_commits<cr>", desc = "Git Commits" },
  { "<leader>tgb", "<cmd>Telescope git_branches<cr>", desc = "Git Branches" },
  { "<leader>tgs", "<cmd>Telescope git_status<cr>", desc = "Git Status" },
  { "<leader>tgS", "<cmd>Telescope git_stash<cr>", desc = "Git Stash" },
  { "<leader>tf", "<cmd>Telescope find_files<cr>", desc = "Find Files" },
  { "<leader>tC", "<cmd>Telescope command_history<cr>", desc = "Command History" },
  { "<leader>tj", "<cmd>Telescope jumplist<cr>", desc = "Jumplist" },
  { "<leader>tr", "<cmd>Telescope resume<cr>", desc = "Resume" },
  { "<leader>ts", "<cmd>Telescope symbols<cr>", desc = "Symbols" },
  { "<leader>th", "<cmd>Telescope search_history<cr>", desc = "Search History" },
  { "<leader>tb", "<cmd>Telescope builtin<cr>", desc = "Builtin" },
  { "<leader>tB", "<cmd>Telescope Buffers<cr>", desc = "buffers" },
  { "<leader>tS", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Search Buffer" },

  -- Folding
  -- { "<leader>zo", "<cmd>lua require('ufo').openAllFolds()<CR>", desc = "Open All Folds" },
  -- { "<leader>zc", "<cmd>lua require('ufo').closeAllFolds()<CR>", desc = "Close" },
  -- { "<leader>zm", "<cmd>lua require('ufo').closeFoldsWith()<CR>", desc = "Close Folds With" },
  -- { "<leader>zr", "<cmd>lua require('ufo').openFoldsExceptKinds()<CR>", desc = "Open Folds except Kinds" },

  -- Transparent
  { "<leader>xt", "<cmd>TransparentToggle<cr>", desc = "Toggle transparency" },
})

-- local setup = {
--   plugins = {
--     marks = true, -- shows a list of your marks on ' and `
--     registers = true, -- shows your registers on " in NORMAL or <C-r> in INSERT mode
--     spelling = {
--       enabled = true, -- enabling this will show WhichKey when pressing z= to select spelling suggestions
--       suggestions = 20, -- how many suggestions should be shown in the list?
--     },
--     -- the presets plugin, adds help for a bunch of default keybindings in Neovim
--     -- No actual key bindings are created
--     presets = {
--       operators = false, -- adds help for operators like d, y, ... and registers them for motion / text object completion
--       motions = false, -- adds help for motions
--       text_objects = false, -- help for text objects triggered after entering an operator
--       windows = true, -- default bindings on <c-w>
--       nav = true, -- misc bindings to work with windows
--       z = true, -- bindings for folds, spelling and others prefixed with z
--       g = true, -- bindings for prefixed with g
--     },
--   },
--   -- add operators that will trigger motion and text object completion
--   -- to enable all native operators, set the preset / operators plugin above
--   -- operators = { gc = "Comments" },
--   replace = {
--     -- override the label used to display some keys. It doesn't effect WK in any other way.
--     -- For example:
--     -- ["<space>"] = "SPC",
--     ["<leader>"] = ",",
--     -- ["<cr>"] = "RET",
--     -- ["<tab>"] = "TAB",
--   },
--   icons = {
--     breadcrumb = "»", -- symbol used in the command line area that shows your active key combo
--     separator = "➜", -- symbol used between a key and it's label
--     group = "+", -- symbol prepended to a group
--   },
--   keys = {
--     scroll_down = "<c-d>", -- binding to scroll down inside the popup
--     scroll_up = "<c-u>", -- binding to scroll up inside the popup
--   },
--   win = {
--     border = "rounded", -- none, single, double, shadow
--     position = "bottom", -- bottom, top
--     margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]
--     padding = { 2, 2, 2, 2 }, -- extra window padding [top, right, bottom, left]
--     winblend = 0,
--   },
--   layout = {
--     height = { min = 4, max = 25 }, -- min and max height of the columns
--     width = { min = 20, max = 50 }, -- min and max width of the columns
--     spacing = 3, -- spacing between columns
--     align = "center", -- align columns left, center or right
--   },
--   -- hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "call", "lua", "^:", "^ " }, -- hide mapping boilerplate
--   show_help = false, -- show help message on the command line when the popup is visible
--   -- triggers = "auto", -- automatically setup triggers
--   -- triggers = {"<leader>"} -- or specify a list manually
--   triggers = {
--     -- list of mode / prefixes that should never be hooked by WhichKey
--     -- this is mostly relevant for key maps that start with a native binding
--     -- most people should not need to change this
--     { "j", mode = { "i", "v"} },
--     { "k", mode = { "i", "v"} },
--     -- i = { "j", "k" },
--     -- v = { "j", "k" },
--   },
-- }

-- local opts = {
--   mode = "n", -- NORMAL mode
--   prefix = "<leader>",
--   buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings
--   silent = true, -- use `silent` when creating keymaps
--   noremap = true, -- use `noremap` when creating keymaps
--   nowait = true, -- use `nowait` when creating keymaps
-- }

-- local vopts = {
--   mode = "v", -- VISUAL mode
--   prefix = "<leader>",
--   buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings
--   silent = true, -- use `silent` when creating keymaps
--   noremap = true, -- use `noremap` when creating keymaps
--   nowait = true, -- use `nowait` when creating keymaps
-- }

-- local vmappings = {
--     { "<leader>/", '<ESC><CMD>lua require("Comment.api").toggle.linewise(vim.fn.visualmode())<CR>', desc = "Comment", mode = "v", nowait = true, remap = false },
-- }

-- local mappings = {
--     { "<leader>", "<leader>", desc = "<leader>EH", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tS", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lu", nowait = true, remap = false },
--     { "<leader>", group = "Options", nowait = true, remap = false },
--     { "<leader>", group = "Replace", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>/", nowait = true, remap = false },
--     { "<leader>", group = "Goto Preview", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lgg", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lev", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lgc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>rb", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>pu", nowait = true, remap = false },
--     { "<leader>", group = "Telescope", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lw", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>pi", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>q", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tB", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>rw", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>rr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ps", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>rf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>pS", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lgi", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gGg", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gGa", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gGd", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fg", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gGf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gb", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gGl", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gGp", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gR", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lt", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tb", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>li", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lq", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lo", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ls", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tC", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lk", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lgt", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lgr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lj", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lh", nowait = true, remap = false },
--     { "<leader>", group = "Gist", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ol", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>oC", nowait = true, remap = false },
--     { "<leader>", group = "Split", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lI", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Ec", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ES", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>h", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ks", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>kv", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gs", nowait = true, remap = false },
--     { "<leader>", group = "LSP", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lH", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Bm", nowait = true, remap = false },
--     { "<leader>", group = "Debug", nowait = true, remap = false },
--     { "<leader>", group = "Browse", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Ea", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Dc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Bi", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Bd", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Bf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Bb", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>DO", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Db", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>oc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lF", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gu", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ow", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ff", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fb", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>glg", nowait = true, remap = false },
--     { "<leader>", group = "Packer", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ot", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>os", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>pc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>or", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lA", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Go", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>go", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Es", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Eh", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gll", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Er", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Et", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Gc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gp", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Gl", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Dl", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ftt", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fi", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fC", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>dw", nowait = true, remap = false },
--     { "<leader>", group = "Find using Telescope", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lR", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fB", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>dc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fH", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fM", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fR", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fI", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Tt", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Rb", nowait = true, remap = false },
--     { "<leader>", desc = "<leader>", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>la", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Tm", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ld", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Sd", nowait = true, remap = false },
--     { "<leader>", group = "Code Runner", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Rp", nowait = true, remap = false },
--     { "<leader>", group = "Session", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Tn", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>du", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Tu", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Do", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Dr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lQ", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Dx", nowait = true, remap = false },
--     { "<leader>", group = "Executor", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Du", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>EP", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Di", nowait = true, remap = false },
--     { "<leader>", group = "Diagnostics", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>lS", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>an", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ac", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Tv", nowait = true, remap = false },
--     { "<leader>", group = "Aerial", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ao", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>aa", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>c", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>af", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>at", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>b", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gd", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Sf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>T4", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>td", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tgb", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tgs", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tm", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tgS", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gj", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>ts", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>glf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tgc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>th", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fss", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fl", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fh", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tj", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fsb", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>tc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gg", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Ss", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>gk", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>zr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>T2", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Sx", nowait = true, remap = false },
--     { "<leader>", group = "Terminal", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>T1", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Sr", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>T3", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Tf", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Th", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>zo", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fk", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fta", nowait = true, remap = false },
--     { "<leader>", group = "Transparent", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>w", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>zm", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fts", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>xt", nowait = true, remap = false },
--     { "<leader>", group = "Folding", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>zc", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>fo", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>Ar", nowait = true, remap = false },
--     { "<leader>", "<leader>", desc = "<leader>EC", nowait = true, remap = false },
--     { "<leader>", group = "Git", mode = { "n", "n" }, nowait = true, remap = false },
--   }

-- -- local mappings = {
-- --     { "<leader>/", '<cmd>lua require("Comment.api").toggle.linewise.current()<CR>', desc = "Comment", nowait = true, remap = false },
-- --     { "<leader>A", group = "AutoRunner", nowait = true, remap = false },
-- --     { "<leader>AC", "<cmd>AutoRunnerClearAll<cr>", desc = "Clear all (command and buffers)", nowait = true, remap = false },
-- --     { "<leader>Aa", "<cmd>AutoRunnerAddCommand<cr>", desc = "Add/change command", nowait = true, remap = false },
-- --     { "<leader>Ac", "<cmd>AutoRunnerClearBuffer<cr>", desc = "Clear buffer", nowait = true, remap = false },
-- --     { "<leader>Ae", "<cmd>AutoRunnerEditFile<cr>", desc = "Edit build file/command (if available)", nowait = true, remap = false },
-- --     { "<leader>Ap", "<cmd>AutoRunnerPrintCommand<cr>", desc = "Print command", nowait = true, remap = false },
-- --     { "<leader>Ar", "<cmd>AutoRunnerRun<cr>", desc = "Run the command", nowait = true, remap = false },
-- --     { "<leader>At", "<cmd>AutoRunnerToggle<cr>", desc = "Toggle output window", nowait = true, remap = false },
-- --     { "<leader>B", group = "Browse", nowait = true, remap = false },
-- --     { "<leader>Bb", "<cmd>Browse<cr>", desc = "Browse", nowait = true, remap = false },
-- --     { "<leader>Bd", "<cmd>BrowseDevdocsSearch<cr>", desc = "Devdocs", nowait = true, remap = false },
-- --     { "<leader>Bf", "<cmd>BrowseDevdocsFiletypeSearch<cr>", desc = "Devdocs Filetype", nowait = true, remap = false },
-- --     { "<leader>Bi", "<cmd>BrowseInputSearch<cr>", desc = "Input Search", nowait = true, remap = false },
-- --     { "<leader>Bm", "<cmd>BrowseMdnSearch<cr>", desc = "Mdn", nowait = true, remap = false },
-- --     { "<leader>D", group = "Debug", nowait = true, remap = false },
-- --     { "<leader>DO", "<cmd>lua require'dap'.step_out()<cr>", desc = "Out", nowait = true, remap = false },
-- --     { "<leader>Db", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", desc = "Breakpoint", nowait = true, remap = false },
-- --     { "<leader>Dc", "<cmd>lua require'dap'.continue()<cr>", desc = "Continue", nowait = true, remap = false },
-- --     { "<leader>Di", "<cmd>lua require'dap'.step_into()<cr>", desc = "Into", nowait = true, remap = false },
-- --     { "<leader>Dl", "<cmd>lua require'dap'.run_last()<cr>", desc = "Last", nowait = true, remap = false },
-- --     { "<leader>Do", "<cmd>lua require'dap'.step_over()<cr>", desc = "Over", nowait = true, remap = false },
-- --     { "<leader>Dr", "<cmd>lua require'dap'.repl.toggle()<cr>", desc = "Repl", nowait = true, remap = false },
-- --     { "<leader>Du", "<cmd>lua require'dapui'.toggle()<cr>", desc = "UI", nowait = true, remap = false },
-- --     { "<leader>Dx", "<cmd>lua require'dap'.terminate()<cr>", desc = "Exit", nowait = true, remap = false },
-- --     { "<leader>E", group = "Executor", nowait = true, remap = false },
-- --     { "<leader>EC", "<cmd>ExecutorReset<cr>", desc = "Clear output", nowait = true, remap = false },
-- --     { "<leader>EH", "<cmd>ExecutorShowHistory<cr>", desc = "Show History", nowait = true, remap = false },
-- --     { "<leader>EP", "<cmd>ExecutorSwapToPopup<cr>", desc = "Swap to Popup", nowait = true, remap = false },
-- --     { "<leader>ES", "<cmd>ExecutorSwapToSplit<cr>", desc = "Swap to Split", nowait = true, remap = false },
-- --     { "<leader>Ea", "<cmd>ExecutorSetCommand<cr>", desc = "Set Command", nowait = true, remap = false },
-- --     { "<leader>Ec", "<cmd>ExecutorShowPresets<cr>", desc = "Show preset commands in config", nowait = true, remap = false },
-- --     { "<leader>Eh", "<cmd>ExecutorHideDetail<cr>", desc = "Hide Detail", nowait = true, remap = false },
-- --     { "<leader>Er", "<cmd>ExecutorRun<cr>", desc = "Run", nowait = true, remap = false },
-- --     { "<leader>Es", "<cmd>ExecutorShowDetail<cr>", desc = "Show Detail", nowait = true, remap = false },
-- --     { "<leader>Et", "<cmd>ExecutorToggleDetail<cr>", desc = "Toggle Detail", nowait = true, remap = false },
-- --     { "<leader>Gc", "<cmd>GitBlameCopySHA<cr>", desc = "Copy SHA URL of the commit", nowait = true, remap = false },
-- --     { "<leader>Gl", "<cmd>GitBlameToggle<cr>", desc = "Blame Toggle", nowait = true, remap = false },
-- --     { "<leader>Go", "<cmd>GitBlameOpenCommitURL<cr>", desc = "Open commit URL", nowait = true, remap = false },
-- --     { "<leader>R", group = "Code Runner", nowait = true, remap = false },
-- --     { "<leader>Rb", ":TermExec cmd=./.buildme.sh<CR>", desc = "Build the project", nowait = true, remap = false },
-- --     { "<leader>Rp", ':TermExec cmd="python %<CR>"', desc = "Run python file", nowait = true, remap = false },
-- --     { "<leader>S", group = "Session", nowait = true, remap = false },
-- --     { "<leader>Sd", "<cmd>Autosession delete<cr>", desc = "Find Delete", nowait = true, remap = false },
-- --     { "<leader>Sf", "<cmd>Autosession search<cr>", desc = "Find", nowait = true, remap = false },
-- --     { "<leader>Sr", "<cmd>SessionRestore<cr>", desc = "Restore", nowait = true, remap = false },
-- --     { "<leader>Ss", "<cmd>SessionSave<cr>", desc = "Save", nowait = true, remap = false },
-- --     { "<leader>Sx", "<cmd>SessionDelete<cr>", desc = "Delete", nowait = true, remap = false },
-- --     { "<leader>T", group = "Terminal", nowait = true, remap = false },
-- --     { "<leader>T1", ":1ToggleTerm<cr>", desc = "1", nowait = true, remap = false },
-- --     { "<leader>T2", ":2ToggleTerm<cr>", desc = "2", nowait = true, remap = false },
-- --     { "<leader>T3", ":3ToggleTerm<cr>", desc = "3", nowait = true, remap = false },
-- --     { "<leader>T4", ":4ToggleTerm<cr>", desc = "4", nowait = true, remap = false },
-- --     { "<leader>Tf", "<cmd>ToggleTerm direction=float<cr>", desc = "Float", nowait = true, remap = false },
-- --     { "<leader>Th", "<cmd>ToggleTerm size=10 direction=horizontal<cr>", desc = "Horizontal", nowait = true, remap = false },
-- --     { "<leader>Tm", "<cmd>lua _MAKE_TOGGLE()<cr>", desc = "Make", nowait = true, remap = false },
-- --     { "<leader>Tn", "<cmd>lua _NODE_TOGGLE()<cr>", desc = "Node", nowait = true, remap = false },
-- --     { "<leader>Tt", "<cmd>lua _HTOP_TOGGLE()<cr>", desc = "Htop", nowait = true, remap = false },
-- --     { "<leader>Tu", "<cmd>lua _NCDU_TOGGLE()<cr>", desc = "NCDU", nowait = true, remap = false },
-- --     { "<leader>Tv", "<cmd>ToggleTerm size=80 direction=vertical<cr>", desc = "Vertical", nowait = true, remap = false },
-- --     { "<leader>a", group = "Aerial", nowait = true, remap = false },
-- --     { "<leader>aa", "<cmd>AerialOpenAll<cr>", desc = "Open all", nowait = true, remap = false },
-- --     { "<leader>ac", "<cmd>AerialCloseAll<cr>", desc = "Close all", nowait = true, remap = false },
-- --     { "<leader>af", "<cmd>AerialOpen float<cr>", desc = "Float", nowait = true, remap = false },
-- --     { "<leader>an", "<cmd>AerialNavToggle<cr>", desc = "Nav Toggle", nowait = true, remap = false },
-- --     { "<leader>ao", "<cmd>AerialOpen<cr>", desc = "Open", nowait = true, remap = false },
-- --     { "<leader>at", "<cmd>AerialToggle<cr>", desc = "Toggle", nowait = true, remap = false },
-- --     { "<leader>b", "<cmd>Telescope buffers<cr>", desc = "Buffers", nowait = true, remap = false },
-- --     { "<leader>c", "<cmd>bdelete!<CR>", desc = "Close Buffer", nowait = true, remap = false },
-- --     { "<leader>d", group = "Diagnostics", nowait = true, remap = false },
-- --     { "<leader>dc", "<cmd>lua require('telescope.builtin').diagnostics({ bufnr = 0 })<cr>", desc = "Diagnostics of current buffer", nowait = true, remap = false },
-- --     { "<leader>du", "<cmd>lua require('telescope.builtin').diagnostics({ no_unlisted = true })<cr>", desc = "Diagnostics from listed buffers", nowait = true, remap = false },
-- --     { "<leader>dw", "<cmd>lua require('telescope.builtin').diagnostics()<cr>", desc = "Workspace Diagnostics", nowait = true, remap = false },
-- --     { "<leader>f", group = "Find using Telescope", nowait = true, remap = false },
-- --     { "<leader>fB", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch", nowait = true, remap = false },
-- --     { "<leader>fC", "<cmd>Telescope commands<cr>", desc = "Commands", nowait = true, remap = false },
-- --     { "<leader>fH", "<cmd>Telescope highlights<cr>", desc = "Highlights", nowait = true, remap = false },
-- --     { "<leader>fI", "<cmd>Telescope lsp_implementations<cr>", desc = "Implementations", nowait = true, remap = false },
-- --     { "<leader>fM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages", nowait = true, remap = false },
-- --     { "<leader>fR", "<cmd>Telescope registers<cr>", desc = "Registers", nowait = true, remap = false },
-- --     { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Buffers", nowait = true, remap = false },
-- --     { "<leader>fc", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme", nowait = true, remap = false },
-- --     { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find files", nowait = true, remap = false },
-- --     { "<leader>fg", "<cmd>Telescope git_files<cr>", desc = "Git Files", nowait = true, remap = false },
-- --     { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help", nowait = true, remap = false },
-- --     { "<leader>fi", "<cmd>Telescope lsp_incoming_calls<cr>", desc = "Incoming calls", nowait = true, remap = false },
-- --     { "<leader>fk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps", nowait = true, remap = false },
-- --     { "<leader>fl", "<cmd>Telescope resume<cr>", desc = "Last Search", nowait = true, remap = false },
-- --     { "<leader>fo", "<cmd>Telescope lsp_outgoing_calls<cr>", desc = "Outgoing calls", nowait = true, remap = false },
-- --     { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent File", nowait = true, remap = false },
-- --     { "<leader>fsb", "<cmd>lua require('telescope.builtin').live_grep({default_text=vim.fn.expand('<cword>'), grep_open_files=true})<cr>", desc = "Grep only open files", nowait = true, remap = false },
-- --     { "<leader>fss", "<cmd>lua require('telescope.builtin').live_grep({default_text=vim.fn.expand('<cword>')})<cr>", desc = "Find string in the workspace", nowait = true, remap = false },
-- --     { "<leader>fta", "<cmd>Telescope live_grep_args<cr>", desc = "Find text (live grep args)", nowait = true, remap = false },
-- --     { "<leader>fts", "<cmd>lua require('telescope').extensions.live_grep_args.live_grep_args(default_text=vim.fn.expand('<cword>'))", desc = "Live Grep Args with the word under cursor", nowait = true, remap = false },
-- --     { "<leader>ftt", "<cmd>Telescope live_grep<cr>", desc = "Find Text", nowait = true, remap = false },
-- --     { "<leader>g", group = "Git", nowait = true, remap = false },
-- --     { "<leader>gG", group = "Gist", nowait = true, remap = false },
-- --     { "<leader>gGa", "<cmd>Gist -b -a<cr>", desc = "Create Anon", nowait = true, remap = false },
-- --     { "<leader>gGd", "<cmd>Gist -d<cr>", desc = "Delete", nowait = true, remap = false },
-- --     { "<leader>gGf", "<cmd>Gist -f<cr>", desc = "Fork", nowait = true, remap = false },
-- --     { "<leader>gGg", "<cmd>Gist -b<cr>", desc = "Create", nowait = true, remap = false },
-- --     { "<leader>gGl", "<cmd>Gist -l<cr>", desc = "List", nowait = true, remap = false },
-- --     { "<leader>gGp", "<cmd>Gist -b -p<cr>", desc = "Create Private", nowait = true, remap = false },
-- --     { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer", nowait = true, remap = false },
-- --     { "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch", nowait = true, remap = false },
-- --     { "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit", nowait = true, remap = false },
-- --     { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Diff", nowait = true, remap = false },
-- --     { "<leader>gg", "<cmd>lua require ('user.terminal').lazygit_toggle()<cr>", desc = "Lazygit", nowait = true, remap = false },
-- --     { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>", desc = "Next Hunk", nowait = true, remap = false },
-- --     { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>", desc = "Prev Hunk", nowait = true, remap = false },
-- --     { "<leader>glf", "<cmd>Git blame<cr>", desc = "Blame column", nowait = true, remap = false },
-- --     { "<leader>glg", "<cmd>Gitsigns blame_line<cr>", desc = "Blame line preview", nowait = true, remap = false },
-- --     { "<leader>gll", "<cmd>GitBlameToggle<cr>", desc = "Blame Virtual Text", nowait = true, remap = false },
-- --     { "<leader>go", "<cmd>Telescope git_status<cr>", desc = "Open changed file", nowait = true, remap = false },
-- --     { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", desc = "Preview Hunk", nowait = true, remap = false },
-- --     { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk", nowait = true, remap = false },
-- --     { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk", nowait = true, remap = false },
-- --     { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk", nowait = true, remap = false },
-- --     { "<leader>h", "<cmd>nohlsearch<CR>", desc = "No HL", nowait = true, remap = false },
-- --     { "<leader>k", group = "Split", nowait = true, remap = false },
-- --     { "<leader>ks", "<cmd>split<cr>", desc = "HSplit", nowait = true, remap = false },
-- --     { "<leader>kv", "<cmd>vsplit<cr>", desc = "VSplit", nowait = true, remap = false },
-- --     { "<leader>l", group = "LSP", nowait = true, remap = false },
-- --     { "<leader>lA", "<cmd>lua vim.lsp.codelens.run()<cr>", desc = "CodeLens Action", nowait = true, remap = false },
-- --     { "<leader>lF", "<cmd>LspToggleAutoFormat<cr>", desc = "Toggle Autoformat", nowait = true, remap = false },
-- --     { "<leader>lH", "<cmd>IlluminateToggle<cr>", desc = "Toggle Doc HL", nowait = true, remap = false },
-- --     { "<leader>lI", "<cmd>Mason<cr>", desc = "Installer Info", nowait = true, remap = false },
-- --     { "<leader>lQ", "<cmd>lua require('telescope.builtin').quickfix()<cr>", desc = "Quickfix (Telescope)", nowait = true, remap = false },
-- --     { "<leader>lR", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename", nowait = true, remap = false },
-- --     { "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols", nowait = true, remap = false },
-- --     { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action", nowait = true, remap = false },
-- --     { "<leader>lc", "<cmd>lua require('user.lsp').server_capabilities()<cr>", desc = "Get Capabilities", nowait = true, remap = false },
-- --     { "<leader>ld", "<cmd>lua require('telescope.builtin').diagnostics({ bufnr = 0 })<cr>", desc = "Document diagnostics", nowait = true, remap = false },
-- --     { "<leader>leV", function() vim.diagnostic.config { virtual_text = not vim.diagnostic.config().virtual_text } end, desc = "Virtual Text", nowait = true, remap = false },
-- --     { "<leader>lev", "<cmd>lua require('lsp_lines').toggle()<cr>", desc = "Virtual Lines", nowait = true, remap = false },
-- --     { "<leader>lf", "<cmd>lua vim.lsp.buf.format({ async = true })<cr>", desc = "Format", nowait = true, remap = false },
-- --     { "<leader>lg", group = "Goto Preview", nowait = true, remap = false },
-- --     { "<leader>lgc", "<cmd>lua require('goto-preview').close_all_win()<cr>", desc = "Close all windows", nowait = true, remap = false },
-- --     { "<leader>lgg", "<cmd>lua require('goto-preview').goto_preview_definition()<cr>", desc = "Definition", nowait = true, remap = false },
-- --     { "<leader>lgi", "<cmd>lua require('goto-preview').goto_preview_implementation()<cr>", desc = "Implementation", nowait = true, remap = false },
-- --     { "<leader>lgr", "<cmd>lua require('goto-preview').goto_preview_references()<cr>", desc = "References", nowait = true, remap = false },
-- --     { "<leader>lgt", "<cmd>lua require('goto-preview').goto_preview_type_definition()<cr>", desc = "Type Definition", nowait = true, remap = false },
-- --     { "<leader>lh", "<cmd>lua require('lsp-inlayhints').toggle()<cr>", desc = "Toggle Hints", nowait = true, remap = false },
-- --     { "<leader>li", "<cmd>MasonLog<cr>", desc = "Info", nowait = true, remap = false },
-- --     { "<leader>lj", "<cmd>lua vim.diagnostic.goto_next({buffer=0})<CR>", desc = "Next Diagnostic", nowait = true, remap = false },
-- --     { "<leader>lk", "<cmd>lua vim.diagnostic.goto_prev({buffer=0})<cr>", desc = "Prev Diagnostic", nowait = true, remap = false },
-- --     { "<leader>lo", "<cmd>Outline<cr>", desc = "Outline (toggles)", nowait = true, remap = false },
-- --     { "<leader>lq", "<cmd>lua vim.diagnostic.setloclist()<cr>", desc = "Quickfix (Diagnostics)", nowait = true, remap = false },
-- --     { "<leader>lr", "<cmd>Trouble lsp_references<cr>", desc = "References", nowait = true, remap = false },
-- --     { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols", nowait = true, remap = false },
-- --     { "<leader>lt", '<cmd>lua require("user.functions").toggle_diagnostics()<cr>', desc = "Toggle Diagnostics", nowait = true, remap = false },
-- --     { "<leader>lu", "<cmd>LuaSnipUnlinkCurrent<cr>", desc = "Unlink Snippet", nowait = true, remap = false },
-- --     { "<leader>lw", "<cmd>lua require('telescope.builtin').diagnostics()<cr>", desc = "Workspace Diagnostics", nowait = true, remap = false },
-- --     { "<leader>o", group = "Options", nowait = true, remap = false },
-- --     { "<leader>oC", "<cmd>lua vim.g.cmp_active=true<cr>", desc = "Completion on", nowait = true, remap = false },
-- --     { "<leader>oc", "<cmd>lua vim.g.cmp_active=false<cr>", desc = "Completion off", nowait = true, remap = false },
-- --     { "<leader>ol", '<cmd>lua require("user.functions").toggle_option("cursorline")<cr>', desc = "Cursorline", nowait = true, remap = false },
-- --     { "<leader>or", '<cmd>lua require("user.functions").toggle_option("relativenumber")<cr>', desc = "Relative", nowait = true, remap = false },
-- --     { "<leader>os", '<cmd>lua require("user.functions").toggle_option("spell")<cr>', desc = "Spell", nowait = true, remap = false },
-- --     { "<leader>ot", '<cmd>lua require("user.functions").toggle_tabline()<cr>', desc = "Tabline", nowait = true, remap = false },
-- --     { "<leader>ow", '<cmd>lua require("user.functions").toggle_option("wrap")<cr>', desc = "Wrap", nowait = true, remap = false },
-- --     { "<leader>p", group = "Packer", nowait = true, remap = false },
-- --     { "<leader>pS", "<cmd>PackerStatus<cr>", desc = "Status", nowait = true, remap = false },
-- --     { "<leader>pc", "<cmd>PackerCompile<cr>", desc = "Compile", nowait = true, remap = false },
-- --     { "<leader>pi", "<cmd>PackerInstall<cr>", desc = "Install", nowait = true, remap = false },
-- --     { "<leader>ps", "<cmd>PackerSync<cr>", desc = "Sync", nowait = true, remap = false },
-- --     { "<leader>pu", "<cmd>PackerUpdate<cr>", desc = "Update", nowait = true, remap = false },
-- --     { "<leader>q", '<cmd>lua require("user.functions").smart_quit()<CR>', desc = "Quit", nowait = true, remap = false },
-- --     { "<leader>r", group = "Replace", nowait = true, remap = false },
-- --     { "<leader>rb", "<cmd>lua require('spectre').open_file_search()<cr>", desc = "Replace Buffer", nowait = true, remap = false },
-- --     { "<leader>rf", "<cmd>lua require('spectre').open_file_search({select_word=true})<cr>", desc = "Replace Word (Buffer)", nowait = true, remap = false },
-- --     { "<leader>rr", "<cmd>lua require('spectre').open()<cr>", desc = "Replace", nowait = true, remap = false },
-- --     { "<leader>rw", "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", desc = "Replace Word (Workspace)", nowait = true, remap = false },
-- --     { "<leader>t", group = "Telescope", nowait = true, remap = false },
-- --     { "<leader>tB", "<cmd>Telescope Buffers<cr>", desc = "buffers", nowait = true, remap = false },
-- --     { "<leader>tC", "<cmd>Telescope command_history<cr>", desc = "Command History", nowait = true, remap = false },
-- --     { "<leader>tS", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Search Buffer", nowait = true, remap = false },
-- --     { "<leader>tb", "<cmd>Telescope builtin<cr>", desc = "Builtin", nowait = true, remap = false },
-- --     { "<leader>tc", "<cmd>Telescope commands<cr>", desc = "Commands", nowait = true, remap = false },
-- --     { "<leader>td", "<cmd>Telescope diagnostics<cr>", desc = "Diagnostics", nowait = true, remap = false },
-- --     { "<leader>tf", "<cmd>Telescope find_files<cr>", desc = "Find Files", nowait = true, remap = false },
-- --     { "<leader>tg", group = "Git", nowait = true, remap = false },
-- --     { "<leader>tgS", "<cmd>Telescope git_stash<cr>", desc = "Git Stash", nowait = true, remap = false },
-- --     { "<leader>tgb", "<cmd>Telescope git_branches<cr>", desc = "Git Branches", nowait = true, remap = false },
-- --     { "<leader>tgc", "<cmd>Telescope git_commits<cr>", desc = "Git Commits", nowait = true, remap = false },
-- --     { "<leader>tgs", "<cmd>Telescope git_status<cr>", desc = "Git Status", nowait = true, remap = false },
-- --     { "<leader>th", "<cmd>Telescope search_history<cr>", desc = "Search History", nowait = true, remap = false },
-- --     { "<leader>tj", "<cmd>Telescope jumplist<cr>", desc = "Jumplist", nowait = true, remap = false },
-- --     { "<leader>tm", "<cmd>Telescope media_files<cr>", desc = "Media Files", nowait = true, remap = false },
-- --     { "<leader>tr", "<cmd>Telescope resume<cr>", desc = "Resume", nowait = true, remap = false },
-- --     { "<leader>ts", "<cmd>Telescope symbols<cr>", desc = "Symbols", nowait = true, remap = false },
-- --     { "<leader>w", "<cmd>w<CR>", desc = "Write", nowait = true, remap = false },
-- --     { "<leader>x", group = "Transparent", nowait = true, remap = false },
-- --     { "<leader>xt", "<cmd>TransparentToggle<cr>", desc = "Toggle transparency", nowait = true, remap = false },
-- --     { "<leader>z", group = "Folding", nowait = true, remap = false },
-- --     { "<leader>zc", "<cmd>lua require('ufo').closeAllFolds()<CR>", desc = "Close", nowait = true, remap = false },
-- --     { "<leader>zm", "<cmd>lua require('ufo').closeFoldsWith()<CR>", desc = "Close Folds With", nowait = true, remap = false },
-- --     { "<leader>zo", "<cmd>lua require('ufo').openAllFolds()<CR>", desc = "Open All Folds", nowait = true, remap = false },
-- --     { "<leader>zr", "<cmd>lua require('ufo').openFoldsExceptKinds()<CR>", desc = "Open Folds except Kinds", nowait = true, remap = false },
-- --   }

-- which_key.setup(setup)

-- which_key.register(mappings, opts)
-- which_key.register(vmappings, vopts)
-- -- which_key.register(m_mappings, m_opts)


